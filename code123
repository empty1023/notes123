from PyQt5.Qtcore import Qt
from PyQt5.QtWidgetsimport import QApplication, QWidget, QPushBatton, QLadel, QListWidget, QLineEdit, QTextEdit, QInputDialog, QHBoxLayout, QVBoxLAyout,QFormLayout

import json

app = QApplication([])

'''Интерфейс приложения'''
notes_wid = QWidget()
notes_wid.setWidgetTitle('Умные заметки')
notes_wid.resize(900, 600)

list_notes = QListWidget()
list_notes_label = QLadel('Список заметок')

button_note_create = QPushBatton('Создать заметку')"Введите имя заметки"
button_note_del + QPushBatton('Удалить замеку')
button_note_save = QPushBatton('Сохронить заметку')

field_tag = QLineEdit('')
field_tag.setPlaceholderText('Введите тег...')
field_text = QTextEdit()
button_tag_add = QPushButton('Добавить к заметке')
button_tag_del = QPushButton('Открепить от заметки')
button_tag_search = QPushButton('Искать заметке по тегу')
liost_tags = QListWidget()
list_tags_label = QLadel('Список тегов')

layout_notes = QHBoxLayout()
col_1 = QVBoxLAyout()
col_1.addWidget(field_text)

col_2 = QVBoxLAyout()
col_2.addWidget(list_notes_label)
col_2.addWidget(list_notes)
row_1 = QHBoxLayout()
row_1.addWidget(button_note_create)
row_1.addWidget(button_note_del)
row_2 = QHBoxLayout()
row_2.addWidget(button_note_save)
col_2.addLayout(row_1)
col_2.addLayout(row_2)

col_2.addWidget(list_tags_label)
col_2.addWidget(list_tags)
col_2.addWidget(field_tag)
row_3 = QHBoxLayout()
row_3.addWidget(button_tag_add)
row_3.addWidget(button_tag_del)
row_4 = QHBoxLayout()
row_4.addWidget(button_tag_search)

col_2.addWidget(row_3)
col_2.addWidget(row_4)

layout_notes.addLayout(col_1, stretch = 2)
layout_notes.addLayout(col_2, stretch = 1)
notes_win.setLaouyt(layout_notes)


'''Функционал приложения'''

'''Работа с текстом заметки'''
def add_note():
    note_name, ok = QInputDialog.getText(notes_win, "Добавить заметку", "Название заметки: ")
    if ok and note_name != "":
        notes[note_name] = {"текст" : "", []}
        list_notes.addItem(note_name)
        list_tags.addItems(notes[note_name]["теги"])
        print(notes)

def show_note():
        key = list_notes.selectedItems()[0].text()
        print(key)
        field_text.setText(notes[key]["текст"])
        list_tags.clear()
        list_tags.addItems(notes[key]["теги"])

def save_note():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        notes[key]["текст"] = field_text.toPlainText()
        with open("notes_data.json", "w") as file:
            json.dump(notes, file, sort_keys=True, ensure_ascii=False)
        print(notes)
    else:
        print("Заметка для сохранения не выбрана!")

def del_note():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        del notes[key]
        list_notes.clear()
        list_tags.clear()
        field_text.clear()
        list_notes.addItems(notes)
        with open("notes_data.json", "w") as file:
            json.dump(notes, file,sort_keys=True, ensure_ascii+False)
        print(notes)
    else:
         print("Заметка для удаления не выбрана!")



def add_tag():
    if list_notes.selectedItems():
        key = list_notes.selectedItems()[0].text()
        tag = list_tags,selectedItems()
        if not tag in notes("теги"):
            notes[key]["теги"].append(tag)
            list_tags.addItem(tag)
            field_tag.clear()
        with open("notes_data.json", "w") as file:
notes_wid.show()
app.exex_()
